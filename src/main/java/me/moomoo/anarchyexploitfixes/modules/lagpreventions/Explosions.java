package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockExplodeEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;

import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class Explosions implements AnarchyExploitFixesModule, Listener {

    private final double disableExplosionsTPS;
    private final boolean logIsEnabled;

    public Explosions() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("lag-preventions.disable-physics-during-low-tps.explosions.enable", "Disable explosions during low tps to combat lag.");
        this.disableExplosionsTPS = config.getDouble("lag-preventions.disable-physics-during-low-tps.explosions.disable-TPS", 14.0);
        this.logIsEnabled = config.getBoolean("lag-preventions.disable-physics-during-low-tps.explosions.log", false);
    }

    @Override
    public String name() {
        return "disable-physics-during-low-tps.explosions";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.disable-physics-during-low-tps.explosions.enable", false);
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onEntityExplode(EntityExplodeEvent event) {
        if (AnarchyExploitFixes.getTPSofLastSecond() <= disableExplosionsTPS) {
            event.setCancelled(true);
            if (logIsEnabled) moduleLog(Level.INFO, name(),"Cancelled explosion because tps is lower than " + disableExplosionsTPS);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onExplodePrime(ExplosionPrimeEvent event) {
        if (AnarchyExploitFixes.getTPSofLastSecond() <= disableExplosionsTPS) {
            event.setCancelled(true);
            if (logIsEnabled) moduleLog(Level.INFO, name(),"Cancelled explosion because tps is lower than " + disableExplosionsTPS);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onBlockExplode(BlockExplodeEvent event) {
        if (AnarchyExploitFixes.getTPSofLastSecond() <= disableExplosionsTPS) {
            event.setCancelled(true);
            if (logIsEnabled) moduleLog(Level.INFO, name(),"Cancelled explosion because tps is lower than " + disableExplosionsTPS);
        }
    }
}
