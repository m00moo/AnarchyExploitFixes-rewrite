package me.moomoo.anarchyexploitfixes.modules.patches.lagexploits;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class LeverSpam implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> playersUsingLevers = new HashMap<>();
    private final boolean shouldKickPlayer, sendActionBar;
    private final long leverDelayInMillis;
    private final Material lever;

    public LeverSpam() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-lever-spam.enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean("patches.prevent-lever-spam.show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean("patches.prevent-lever-spam.kick-player", false);
        this.leverDelayInMillis = config.getInt("patches.prevent-lever-spam.lever-delay-in-ticks", 20, "How many ticks a player needs to wait until he can use the lever again\n20 Ticks = 1 Second") * 50L;
        this.lever = XMaterial.LEVER.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-lever-spam";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-lever-spam.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (!event.getClickedBlock().getType().equals(lever)) return;

        Player player = event.getPlayer();
        UUID playerUniqueID = player.getUniqueId();

        if (
                playersUsingLevers.containsKey(playerUniqueID)
                && playersUsingLevers.get(playerUniqueID) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
            if (sendActionBar) player.sendActionBar(ChatColor.translateAlternateColorCodes('&',
                    AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
            );
            if (shouldKickPlayer) player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                    AnarchyExploitFixes.getLang(player.getLocale()).stopSpammingLevers)
            );
        } else {
            playersUsingLevers.put(playerUniqueID, System.currentTimeMillis() + leverDelayInMillis);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        playersUsingLevers.remove(event.getPlayer().getUniqueId());
    }
}
