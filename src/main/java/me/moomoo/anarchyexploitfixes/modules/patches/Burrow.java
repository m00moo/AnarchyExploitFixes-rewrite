package me.moomoo.anarchyexploitfixes.modules.patches;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

public class Burrow implements AnarchyExploitFixesModule, Listener {

    private final double damageWhenMoving;
    private final boolean teleportAboveBlock, preventIfBlockAboveBurrow, breakAnvilInsteadOfTP, allowSlabs;
    private final Material air, sand, gravel, enchantment_table, ender_chest, bedrock, beacon;

    public Burrow() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.damageWhenMoving = config.getDouble("patches.prevent-burrow.damage-when-moving",1.0, "1.0 = Half a heart of damage every time you move.");
        this.teleportAboveBlock = config.getBoolean("patches.prevent-burrow.teleport-above-block", true);
        this.preventIfBlockAboveBurrow = config.getBoolean("patches.prevent-burrow.prevent-if-block-above-burrow", false, "Prevent burrow even if there is a block above the block they are burrowing in, please note this may allow creating an \"elevator\", players will keep teleporting up until they hit air");
        this.breakAnvilInsteadOfTP = config.getBoolean("patches.prevent-burrow.break-anvil-instead-of-teleport", true);
        boolean slabsAreAllowed = config.getBoolean("patches.prevent-burrow.allow-slabs-in-burrow", true, "Disabled by default in 1.12, needs to be enabled to prevent a bug where players are teleported above a slab when the slab is underwater, only happens in newer versions.");
        this.allowSlabs = AnarchyExploitFixes.getMCVersion() > 12 && slabsAreAllowed;
        this.air = XMaterial.AIR.parseMaterial();
        this.sand = XMaterial.SAND.parseMaterial();
        this.gravel = XMaterial.GRAVEL.parseMaterial();
        this.enchantment_table = XMaterial.ENCHANTING_TABLE.parseMaterial();
        this.ender_chest = XMaterial.ENDER_CHEST.parseMaterial();
        this.bedrock = XMaterial.BEDROCK.parseMaterial();
        this.beacon = XMaterial.BEACON.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-burrow";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-burrow.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getGameMode().equals(GameMode.SURVIVAL)) return;
        
        Location playerLocation = player.getLocation();
        Block burrowBlock = playerLocation.getBlock();
        Material burrowBlockMaterial = burrowBlock.getType();

        if (
                burrowBlockMaterial.equals(air)
                || burrowBlockMaterial.equals(sand)
                || burrowBlockMaterial.equals(gravel)
        ) return;

        Block blockAboveBurrowBlock = burrowBlock.getRelative(BlockFace.UP);
        if (preventIfBlockAboveBurrow || blockAboveBurrowBlock.getType().equals(air)) {

            if (
                    burrowBlockMaterial.isOccluding()
                    && !isSinkInBlock(burrowBlockMaterial)
            ) {
                if (!allowSlabs || !isSlab(burrowBlockMaterial)) {
                    player.damage(damageWhenMoving);
                    if (teleportAboveBlock) {
                        player.teleport(blockAboveBurrowBlock.getLocation());
                    }
                }
            }

            if (
                    burrowBlockMaterial.equals(ender_chest)
                    || isSinkInBlock(burrowBlockMaterial)
            ) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.875) {
                    player.damage(damageWhenMoving);
                    if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                }
            }

            if (burrowBlockMaterial.equals(enchantment_table)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.75) {
                    player.damage(damageWhenMoving);
                    if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                }
            }

            if (isAnvil(burrowBlockMaterial)) {
                player.damage(damageWhenMoving);
                if (breakAnvilInsteadOfTP) {
                    burrowBlock.breakNaturally();
                } else {
                    if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
                }
            }

            if (
                    burrowBlockMaterial.equals(bedrock)
                    || burrowBlockMaterial.equals(beacon)
            ) {
                player.damage(damageWhenMoving);
                if (teleportAboveBlock) player.teleport(blockAboveBurrowBlock.getLocation());
            }

        }
    }

    private boolean isSinkInBlock(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        switch (XMaterial.matchXMaterial(burrowBlockMaterial)) {
            case SOUL_SAND:
            case MUD:
                return true;
            default:
                return false;
        }
    }

    private boolean isAnvil(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        switch (XMaterial.matchXMaterial(burrowBlockMaterial)) {
            case ANVIL:
            case CHIPPED_ANVIL:
            case DAMAGED_ANVIL:
                return true;
            default:
                return false;
        }
    }

    private boolean isSlab(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        switch (XMaterial.matchXMaterial(burrowBlockMaterial)) {
            case ACACIA_SLAB:
            case ANDESITE_SLAB:
            case BAMBOO_MOSAIC_SLAB:
            case BAMBOO_SLAB:
            case BIRCH_SLAB:
            case BLACKSTONE_SLAB:
            case BRICK_SLAB:
            case COBBLED_DEEPSLATE_SLAB:
            case COBBLESTONE_SLAB:
            case CRIMSON_SLAB:
            case CUT_COPPER_SLAB:
            case CUT_RED_SANDSTONE_SLAB:
            case CUT_SANDSTONE_SLAB:
            case DARK_OAK_SLAB:
            case DARK_PRISMARINE_SLAB:
            case DEEPSLATE_BRICK_SLAB:
            case DEEPSLATE_TILE_SLAB:
            case DIORITE_SLAB:
            case END_STONE_BRICK_SLAB:
            case EXPOSED_CUT_COPPER_SLAB:
            case GRANITE_SLAB:
            case JUNGLE_SLAB:
            case MANGROVE_SLAB:
            case MOSSY_COBBLESTONE_SLAB:
            case MOSSY_STONE_BRICK_SLAB:
            case MUD_BRICK_SLAB:
            case NETHER_BRICK_SLAB:
            case OAK_SLAB:
            case OXIDIZED_CUT_COPPER_SLAB:
            case PETRIFIED_OAK_SLAB:
            case POLISHED_ANDESITE_SLAB:
            case POLISHED_BLACKSTONE_BRICK_SLAB:
            case POLISHED_BLACKSTONE_SLAB:
            case POLISHED_DEEPSLATE_SLAB:
            case POLISHED_DIORITE_SLAB:
            case POLISHED_GRANITE_SLAB:
            case PRISMARINE_BRICK_SLAB:
            case PRISMARINE_SLAB:
            case PURPUR_SLAB:
            case QUARTZ_SLAB:
            case RED_NETHER_BRICK_SLAB:
            case RED_SANDSTONE_SLAB:
            case SANDSTONE_SLAB:
            case SCULK_SENSOR:
            case SCULK_SHRIEKER:
            case SMOOTH_QUARTZ_SLAB:
            case SMOOTH_RED_SANDSTONE_SLAB:
            case SMOOTH_SANDSTONE_SLAB:
            case SMOOTH_STONE_SLAB:
            case SPRUCE_SLAB:
            case STONE_BRICK_SLAB:
            case STONE_SLAB:
            case WARPED_SLAB:
            case WAXED_CUT_COPPER_SLAB:
            case WAXED_EXPOSED_CUT_COPPER_SLAB:
            case WAXED_OXIDIZED_CUT_COPPER_SLAB:
            case WAXED_WEATHERED_CUT_COPPER_SLAB:
            case WEATHERED_CUT_COPPER_SLAB:
                return true;
            default:
                return false;
        }
    }
}
