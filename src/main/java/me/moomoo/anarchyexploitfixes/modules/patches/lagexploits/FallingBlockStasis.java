package me.moomoo.anarchyexploitfixes.modules.patches.lagexploits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.FallingBlock;

public class FallingBlockStasis implements AnarchyExploitFixesModule, Runnable {

    private final int max_alive_time;
    private final long check_period_in_ticks;
    
    public FallingBlockStasis() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-falling-block-stasis-exploit.enable",  "Patches a lag exploit using falling blocks and glitched piston heads: https://www.youtube.com/watch?v=y2CjPlvtj58");
        this.max_alive_time = config.getInt("patches.prevent-falling-block-stasis-exploit.falling-blocks-max-alive-time-in-ticks", 300, "(20 ticks = 1 second)");
        this.check_period_in_ticks = config.getInt("patches.prevent-falling-block-stasis-exploit.check-period-in-seconds", 60, "How frequently we should check for all projectile's alive time") * 20L;
    }

    @Override
    public String name() {
        return "entities-on-piston-heads";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-falling-block-stasis-exploit.enable", true);
    }

    @Override
    public void run() {
        for (World world : Bukkit.getWorlds()) {
            for (Entity entity : world.getEntities()) {
                if (entity instanceof FallingBlock) {
                    if (entity.getTicksLived() > max_alive_time) {
                        entity.remove();
                    }
                }
            }
        }
    }
}
