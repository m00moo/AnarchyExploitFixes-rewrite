package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import static me.moomoo.anarchyexploitfixes.utils.ElytraUtils.*;

public class ElytraOnCeiling implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private static final Sound notifyDing = XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound();
    private final int spawn_Radius;
    private final double ceiling_SpeedOldChunks, ceiling_SpeedNewChunks, ceiling_BurstSpeedOldChunks,
            ceiling_BurstSpeedNewChunks, ceiling_BurstOldChunk_TPS, ceiling_BurstNewChunk_TPS, ceiling_DenyElytraTPS;
    private final boolean showActionbarMsgs, displayChunkInfo, spawn_SettingsEnabled, ceiling_DenyElytra,
            ceiling_EnableBursting, ceiling_DenyOnLowTPS, ceiling_AlsoRemoveOnLowTPS;
    private final Material elytra = XMaterial.ELYTRA.parseMaterial();

    public ElytraOnCeiling() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        config.addComment("elytra.elytra-speed.Nether-Ceiling.enable",  "Use separate values for players above the nether ceiling.");
        this.spawn_SettingsEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_Radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.ceiling_DenyElytra = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-usage", false);
        this.ceiling_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-old-chunks", 0.5);
        this.ceiling_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-new-chunks", 0.5);
        this.ceiling_EnableBursting = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable-bursting", true);
        this.ceiling_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunks", 1.0);
        this.ceiling_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunk-TPS", 18.0);
        this.ceiling_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunks", 1.0);
        this.ceiling_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunk-TPS", 18.0);
        this.ceiling_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-on-low-TPS", true);
        this.ceiling_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.deny-elytra-TPS", 12.0);
        this.ceiling_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "elytra-speed.Nether-Ceiling";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (!isOnNetherCeiling(player)) return;
        if (spawn_SettingsEnabled && isAtSpawn(player, spawn_Radius)) return;

        LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());

        if (ceiling_DenyElytra) {
            event.setCancelled(true);
            player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_DisabledHere));

            return;
        }

        if (ceiling_DenyOnLowTPS && AnarchyExploitFixes.getTPSofLastSecond() <= ceiling_DenyElytraTPS) {
            event.setCancelled(true);
            player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_DisabledLowTPS)
                    .replace("%tps%", String.valueOf(ceiling_DenyElytraTPS))
            );

            if (ceiling_AlsoRemoveOnLowTPS) {
                PlayerInventory playerInv = player.getInventory();
                if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(elytra)) {
                    ItemStack elytra = playerInv.getChestplate();
                    playerInv.setChestplate(null);
                    player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                }
            }

            return;
        }

        double flySpeed = blocksPerTick(event.getFrom(), event.getTo());

        if (plugin.playersInNewChunks.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (ceiling_EnableBursting && canBurst(ceiling_BurstNewChunk_TPS)) {
                // Burst Speed New Chunks
                if (flySpeed > ceiling_BurstSpeedNewChunks+tolerance) {
                    // Too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastChunkInfo)
                                .replace("%neworold%", lang.ceiling_New)
                                .replace("%chunks%", lang.ceiling_Chunks)
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFast));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.ceiling_New_Color)+lang.ceiling_New.toUpperCase())
                                .replace("%chunks%", lang.ceiling_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_BurstSpeedNewChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_BurstSpeedNewChunks))
                        );
                    }
                }
            } else {
                // Normal Speed New Chunks
                if (flySpeed > ceiling_SpeedNewChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (ceiling_EnableBursting) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastLowTPS));
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastChunkInfo)
                                    .replace("%neworold%", lang.ceiling_New)
                                    .replace("%chunks%", lang.ceiling_Chunks)
                            );
                        } else {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFast));
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.ceiling_New_Color)+lang.ceiling_New.toUpperCase())
                                .replace("%chunks%", lang.ceiling_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_SpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_SpeedOldChunks))
                        );
                    }
                }
            }
        } else {
            // Speed Old Chunks
            if (ceiling_EnableBursting && canBurst(ceiling_BurstOldChunk_TPS)) {
                // Burst Speed Old Chunks
                if (flySpeed > ceiling_BurstSpeedOldChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastChunkInfo)
                                .replace("%neworold%", lang.ceiling_Old)
                                .replace("%chunks%", lang.ceiling_Chunks)
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFast));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.ceiling_Old_Color)+lang.ceiling_Old.toUpperCase())
                                .replace("%chunks%", lang.ceiling_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_BurstSpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_BurstSpeedOldChunks))
                        );
                    }
                }
            } else {
                // Normal Speed Old Chunks
                if (flySpeed > ceiling_SpeedOldChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (ceiling_EnableBursting) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastLowTPS));
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFastChunkInfo)
                                    .replace("%neworold%", lang.ceiling_Old)
                                    .replace("%chunks%", lang.ceiling_Chunks)
                            );
                        } else {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_TooFast));
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.ceiling_Old_Color)+lang.ceiling_Old.toUpperCase())
                                .replace("%chunks%", lang.ceiling_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_SpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.ceiling_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(ceiling_SpeedOldChunks))
                        );
                    }
                }
            }
        }
    }
}
