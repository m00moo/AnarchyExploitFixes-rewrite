package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.UUID;

public class ElytraPacketFly implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final Sound notifyDing = XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound();
    private final BukkitScheduler bukkitScheduler;
    private final HashMap<UUID, Integer> levels = new HashMap<>();
    private final int maxElytraOpensPer10s;
    private final boolean playerShouldBeNotified, playerShouldBeKickedInstead;
    private final Material elytra = XMaterial.ELYTRA.parseMaterial();

    public ElytraPacketFly() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.bukkitScheduler = plugin.getServer().getScheduler();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("elytra.packet-elytra-fly.patch-packet-elytra-fly","Patches the future/rusherhack/kamiblue 2b2t elytra fly exploit");
        this.maxElytraOpensPer10s = config.getInt("elytra.packet-elytra-fly.max-elytra-opens-per-10-seconds", 25, "Will only allow players to go about 85km/h on kami blue, and won't even work on rusherhack. Recommended to not go lower as there could be false positives.");
        this.playerShouldBeNotified = config.getBoolean("elytra.packet-elytra-fly.notify-player-to-disable-packetfly", true, "Configure message in lang folder.");
        this.playerShouldBeKickedInstead = config.getBoolean("elytra.packet-elytra-fly.kick-instead-of-remove-elytra", false, "If enabled, the plugin will not remove elytra from the player, but simply disconnect from the server.");
    }

    @Override
    public String name() {
        return "packet-elytra-fly";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.packet-elytra-fly.patch-packet-elytra-fly", true);
    }

    @EventHandler
    private void onElytraOpen(EntityToggleGlideEvent event) {
        if (!(event.getEntity() instanceof Player)) return;
        Player player = (Player) event.getEntity();
        if (player.hasPermission("anarchyexploitfixes.bypass")) return;
        UUID playerUniqueID = player.getUniqueId();

        Integer level = levels.get(playerUniqueID);
        if (level != null) {
            if (level > maxElytraOpensPer10s) {
                if (playerShouldBeKickedInstead) {
                    player.kickPlayer(ChatColor.translateAlternateColorCodes('&',
                            AnarchyExploitFixes.getLang(player.getLocale()).disablePacketElytraFly
                    ));
                } else {
                    ItemStack chestplate = player.getInventory().getChestplate();
                    if (chestplate != null && chestplate.getType().equals(elytra)) {
                        // remove elytra from chestplate
                        player.getInventory().setChestplate(null);
                        // drop elytra at player position
                        player.getWorld().dropItemNaturally(player.getLocation(), chestplate);
                        // play sound to notify
                        player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);
                        if (playerShouldBeNotified) player.sendMessage(ChatColor.translateAlternateColorCodes('&',
                                    AnarchyExploitFixes.getLang(player.getLocale()).disablePacketElytraFly
                        ));
                    }
                }
            } else {
                levels.merge(playerUniqueID, 1, Integer::sum);
                bukkitScheduler.runTaskLaterAsynchronously(plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L);
            }
        } else {
            levels.put(playerUniqueID, 1);
            bukkitScheduler.runTaskLaterAsynchronously(plugin, () -> levels.put(playerUniqueID, levels.get(playerUniqueID) - 1), 200L);
        }
    }
}
