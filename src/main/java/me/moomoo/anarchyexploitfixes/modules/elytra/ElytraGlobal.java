package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import static me.moomoo.anarchyexploitfixes.utils.ElytraUtils.*;

public class ElytraGlobal implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private static final Sound notifyDing = XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound();
    private final int spawn_Radius;
    private final double global_SpeedOldChunks, global_SpeedNewChunks, global_BurstSpeedOldChunks,
            global_BurstSpeedNewChunks, global_BurstOldChunk_TPS, global_BurstNewChunk_TPS, global_DenyElytraTPS;
    private final boolean showActionbarMsgs, displayChunkInfo, spawn_SettingsEnabled, ceiling_SettingsEnabled, global_DenyElytra,
            global_EnableBursting, global_DenyOnLowTPS, global_AlsoRemoveOnLowTPS;
    private final Material elytra = XMaterial.ELYTRA.parseMaterial();

    public ElytraGlobal() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true, "Display info in Actionbar while flying.");
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true, "Inform flying player if they are in old or new chunks.");
        config.addComment("elytra.elytra-speed", "NOTE: Set nocheatplus horizontal elytra settings to 999999");
        config.addComment("elytra.elytra-speed.Global-Settings.enable", "Global settings. If nothing else is enabled, this will be used for all environments.");
        this.spawn_SettingsEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_Radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.ceiling_SettingsEnabled = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);
        this.global_DenyElytra = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-usage", false);
        this.global_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-old-chunks", 1.81);
        this.global_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-new-chunks", 1.81);
        this.global_EnableBursting = config.getBoolean("elytra.elytra-speed.Global-Settings.enable-bursting", true);
        this.global_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunks", 5.0);
        this.global_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunk-TPS", 18.0);
        this.global_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunks", 3.12);
        this.global_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunk-TPS", 19.0);
        this.global_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-on-low-TPS", true);
        this.global_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Global-Settings.deny-elytra-TPS", 12.0);
        this.global_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "elytra-speed.Global-Settings";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.Global-Settings.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (spawn_SettingsEnabled && isAtSpawn(player, spawn_Radius)) return;
        if (ceiling_SettingsEnabled && isOnNetherCeiling(player)) return;

        LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());

        if (global_DenyElytra) {
            event.setCancelled(true);
            player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_DisabledHere));

            return;
        }

        if (global_DenyOnLowTPS && AnarchyExploitFixes.getTPSofLastSecond() <= global_DenyElytraTPS) {
            event.setCancelled(true);
            player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_DisabledLowTPS)
                    .replace("%tps%", String.valueOf(global_DenyElytraTPS))
            );

            if (global_AlsoRemoveOnLowTPS) {
                PlayerInventory playerInv = player.getInventory();
                if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(elytra)) {
                    ItemStack elytra = playerInv.getChestplate();
                    playerInv.setChestplate(null);
                    player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                }
            }

            return;
        }

        double flySpeed = blocksPerTick(event.getFrom(), event.getTo());

        if (plugin.playersInNewChunks.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (global_EnableBursting && canBurst(global_BurstNewChunk_TPS)) {
                // Burst Speed New Chunks
                if (flySpeed > global_BurstSpeedNewChunks+tolerance) {
                    // Too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastChunkInfo)
                                .replace("%neworold%", lang.global_New)
                                .replace("%chunks%", lang.global_Chunks)
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFast));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.global_New_Color)+lang.global_New.toUpperCase())
                                .replace("%chunks%", lang.global_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_BurstSpeedNewChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_BurstSpeedNewChunks))
                        );
                    }
                }
            } else {
                // Normal Speed New Chunks
                if (flySpeed > global_SpeedNewChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (global_EnableBursting) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastLowTPS));
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastChunkInfo)
                                    .replace("%neworold%", lang.global_New)
                                    .replace("%chunks%", lang.global_Chunks)
                            );
                        } else {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFast));
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.global_New_Color)+lang.global_New.toUpperCase())
                                .replace("%chunks%", lang.global_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_SpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_SpeedOldChunks))
                        );
                    }
                }
            }
        } else {
            // Speed Old Chunks
            if (global_EnableBursting && canBurst(global_BurstOldChunk_TPS)) {
                // Burst Speed Old Chunks
                if (flySpeed > global_BurstSpeedOldChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastChunkInfo)
                                .replace("%neworold%", lang.global_Old)
                                .replace("%chunks%", lang.global_Chunks)
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFast));
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.global_Old_Color)+lang.global_Old.toUpperCase())
                                .replace("%chunks%", lang.global_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_BurstSpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_BurstSpeedOldChunks))
                        );
                    }
                }
            } else {
                // Normal Speed Old Chunks
                if (flySpeed > global_SpeedOldChunks+tolerance) {
                    // too fast
                    event.setCancelled(true);
                    player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    if (global_EnableBursting) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastLowTPS));
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFastChunkInfo)
                                    .replace("%neworold%", lang.global_Old)
                                    .replace("%chunks%", lang.global_Chunks)
                            );
                        } else {
                            player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_TooFast));
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    if (displayChunkInfo) {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_YouAreFlyingIn)
                                .replace("%neworold%", ChatColor.translateAlternateColorCodes('&', lang.global_Old_Color)+lang.global_Old.toUpperCase())
                                .replace("%chunks%", lang.global_Chunks)
                                +" "+ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_SpeedOldChunks))
                        );
                    } else {
                        player.sendActionBar(ChatColor.translateAlternateColorCodes('&', lang.global_Speed)
                                .replace("%speed%", speed(flySpeed))
                                .replace("%maxspeed%", String.valueOf(global_SpeedOldChunks))
                        );
                    }
                }
            }
        }
    }


}
