package me.moomoo.anarchyexploitfixes.modules.chat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.apache.commons.text.similarity.LevenshteinDistance;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;

import java.util.HashMap;
import java.util.HashSet;
import java.util.UUID;
import java.util.logging.Level;

public class PreventChatSpam implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<UUID> playersWritingInChat = new HashSet<>();
    private final HashSet<String> previouslySentMessages = new HashSet<>();
    private final HashMap<UUID, Integer> playersAndTheirMessageCounts = new HashMap<>();
    private final long antiSpamTime, antiSpamCheckTime, antiSpamWordTime;
    private final int messagesPerTime, lenientWordCharacterLimit;
    private final boolean logIsEnabled, shouldNotifyPlayer, lenientWordCheckIsEnabled;
    private final double antiSpamWordSimilarityPercentage;

    public PreventChatSpam() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("chat.prevent-spam.log", false, "Bit spammy, intended for debug");
        this.shouldNotifyPlayer = config.getBoolean("chat.prevent-spam.notify-player", false, "Notifies players to slow down when spamming");
        this.antiSpamTime = config.getInt("chat.prevent-spam.anti-spam-time", 1, "Global limit (Messages per X seconds)") * 20L;
        this.antiSpamCheckTime = config.getInt("chat.prevent-spam.anti-spam-check-time", 30, "How many messages should we allow to send in X seconds") * 20L;
        this.antiSpamWordTime = config.getInt("chat.prevent-spam.anti-spam-word-time", 60, "How long a player should wait before being able to send another exact same message") * 20L;
        this.antiSpamWordSimilarityPercentage = config.getDouble("chat.prevent-spam.anti-spam-word-similarity-percentage", 94.8, "The percentage of similarity to previously sent messages for it to count as spam");
        this.lenientWordCheckIsEnabled = config.getBoolean("chat.prevent-spam.lenient-word-check.enable", true, "Will not count messages as word spam that are shorter than or equal to the length of the configured limit.");
        this.lenientWordCharacterLimit = config.getInt("chat.prevent-spam.lenient-word-check.message-character-limit", 10);
        this.messagesPerTime = config.getInt("chat.prevent-spam.anti-spam-messages-per-time", 10, "~1 message every 3 seconds if constantly spamming");
    }

    @Override
    public String name() {
        return "prevent-spam";
    }

    @Override
    public String category() {
        return "chat";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chat.prevent-spam.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerChat(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        if (player.hasPermission("anarchyexploitfixes.chatbypass")) return;

        String message = event.getMessage();
        UUID playerUniqueId = player.getUniqueId();

        if (!playersWritingInChat.contains(playerUniqueId)) {
            playersWritingInChat.add(playerUniqueId);
            plugin.getServer().getScheduler().runTaskLater(
                    plugin, () -> playersWritingInChat.remove(playerUniqueId), antiSpamTime
            );
            if (!isSimilarToPreviouslySentMessages(message)) {
                if (lenientWordCheckIsEnabled) {
                    if (message.length() > lenientWordCharacterLimit) {
                        previouslySentMessages.add(message);
                    }
                } else {
                    previouslySentMessages.add(message);
                }
                plugin.getServer().getScheduler().runTaskLater(
                        plugin, () -> previouslySentMessages.remove(message), antiSpamWordTime
                );

                if (!playersAndTheirMessageCounts.containsKey(playerUniqueId)) {
                    playersAndTheirMessageCounts.put(playerUniqueId, 1);
                } else {
                    if (playersAndTheirMessageCounts.get(playerUniqueId) > messagesPerTime) {
                        event.setCancelled(true);
                        if (shouldNotifyPlayer) player.sendMessage(ChatColor.translateAlternateColorCodes('&', AnarchyExploitFixes.getLang(player.getLocale()).chat_antispam_tooManyMsgsNotif));
                        if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(),
                                player.getName() + " FAILED to send message due to too many messages in time period."
                        );
                    } else {
                        playersAndTheirMessageCounts.merge(playerUniqueId, 1, Integer::sum);
                        plugin.getServer().getScheduler().runTaskLater(
                                plugin, () -> playersAndTheirMessageCounts.put(playerUniqueId, playersAndTheirMessageCounts.get(playerUniqueId) - 1), antiSpamCheckTime
                        );
                    }
                }

            } else {
                event.setCancelled(true);
                if (shouldNotifyPlayer) player.sendMessage(ChatColor.translateAlternateColorCodes('&', AnarchyExploitFixes.getLang(player.getLocale()).chat_antispam_tooManyMsgsNotif));
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(),
                        player.getName() + " FAILED to send message due to suspected duplicate messages."
                );
            }
        } else {
            event.setCancelled(true);
            if (shouldNotifyPlayer) player.sendMessage(ChatColor.translateAlternateColorCodes('&', AnarchyExploitFixes.getLang(player.getLocale()).chat_antispam_tooManyMsgsNotif));
            if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(),
                    player.getName() + " FAILED to send message due to slowmode: '"+message+"'"
            );
        }
    }

    private boolean isSimilarToPreviouslySentMessages(String newMessage) {
        for (String oldMessage : previouslySentMessages) {
            double similarity = stringSimilarityInPercent(newMessage, oldMessage);
            if (similarity >= antiSpamWordSimilarityPercentage) {
                if (logIsEnabled) {
                    LogUtils.moduleLog(Level.WARNING, name(), "Message exceeded similarity limit: " + similarity + "% similar to previously sent message:");
                    LogUtils.moduleLog(Level.WARNING, name(), "'" + oldMessage + "'");
                }
                return true;
            }
        }
        return false;
    }

    private static double stringSimilarityInPercent(String s1, String s2) {
        // Get the longest String for correct percentage values
        String longer = s1;
        String shorter = s2;
        if (s1.length() < s2.length()) {
            longer = s2;
            shorter = s1;
        }
        double longerLength = longer.length();

        if (longerLength == 0) return 100;
        return ((longerLength - new LevenshteinDistance().apply(longer, shorter)) / longerLength) * 100;
    }
}
