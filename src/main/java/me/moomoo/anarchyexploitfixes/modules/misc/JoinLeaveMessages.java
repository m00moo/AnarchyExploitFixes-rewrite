package me.moomoo.anarchyexploitfixes.modules.misc;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class JoinLeaveMessages implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean connectionMsgsOnByDefault, showInConsole;

    public JoinLeaveMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("misc.join-leave-messages.enable",  "If you want to hide yourself or someone else when logging into the game,\nuse these permissions: anarchyexploitfixes.silentJoin, anarchyexploitfixes.silentLeave");
        this.connectionMsgsOnByDefault = config.connectionMsgsAreOnByDefault;
        this.showInConsole = config.getBoolean("misc.join-leave-messages.show-in-console", false);
    }

    @Override
    public String name() {
        return "join-leave-messages";
    }

    @Override
    public String category() {
        return "misc";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("misc.join-leave-messages.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        event.setJoinMessage(null);
        Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPermission("anarchyexploitfixes.silentJoin")) return;

        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (connectionMsgsOnByDefault) {
                if (!plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendJoinMessage(onlinePlayer, joiningPlayer);
                }
            } else {
                if (plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendJoinMessage(onlinePlayer, joiningPlayer);
                }
            }
        }

        // Use Bukkit.getLogger() here to avoid using the plugin's prefix
        if (showInConsole) Bukkit.getLogger().info(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).joinMessage.replace("%player%", joiningPlayer.getName())
        )+" ("+joiningPlayer.getLocale()+")");
    }

    private void sendJoinMessage(Player onlinePlayer, Player joiningPlayer) {
        onlinePlayer.sendMessage(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).joinMessage.replace("%player%", joiningPlayer.getName())
        ));
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerLeaveEvent(PlayerQuitEvent event) {
        event.setQuitMessage(null);
        Player leavingPlayer = event.getPlayer();
        if (leavingPlayer.hasPermission("anarchyexploitfixes.silentLeave")) return;

        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (connectionMsgsOnByDefault) {
                if (!plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendLeaveMessage(onlinePlayer, leavingPlayer);
                }
            } else {
                if (plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendLeaveMessage(onlinePlayer, leavingPlayer);
                }
            }
        }

        if (showInConsole) Bukkit.getLogger().info(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(leavingPlayer.getLocale()).leaveMessage.replace("%player%", leavingPlayer.getName())
        )+" ("+leavingPlayer.getLocale()+")");
    }

    private void sendLeaveMessage(Player onlinePlayer, Player leavingPlayer) {
        onlinePlayer.sendMessage(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).leaveMessage.replace("%player%", leavingPlayer.getName())
        ));
    }
}
