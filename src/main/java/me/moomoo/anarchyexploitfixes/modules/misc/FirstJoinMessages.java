package me.moomoo.anarchyexploitfixes.modules.misc;

import com.ibm.icu.text.RuleBasedNumberFormat;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;

import java.util.HashSet;
import java.util.Locale;

public class FirstJoinMessages implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Config config;
    private final boolean logFirstJoin;
    private final HashSet<Locale> availableTranslations = new HashSet<>();

    public FirstJoinMessages() {
        shouldEnable();
        this.config = AnarchyExploitFixes.getConfiguration();
        config.addComment("misc.join-leave-messages.first-join-messages.enable", "Configure message in lang folder.");
        this.plugin = AnarchyExploitFixes.getInstance();
        this.logFirstJoin = config.getBoolean("misc.join-leave-messages.first-join-messages.show-in-console", true);
        for (String translationString : AnarchyExploitFixes.getLoadedTranslationStrings()) {
            availableTranslations.add(Locale.forLanguageTag(translationString.replace("_", "-")));
        }
    }

    @Override
    public String name() {
        return "first-join-messages";
    }

    @Override
    public String category() {
        return "misc";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("misc.join-leave-messages.first-join-messages.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPlayedBefore()) return;
        if (joiningPlayer.hasPermission("anarchyexploitfixes.silentJoin")) return;

        // We can use getOfflinePlayers().length here safely because it refers to the amount of players with a save-file,
        // which is created when the player joins for the first time.
        int joiningPlayersNumber = plugin.getServer().getOfflinePlayers().length;

        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (config.connectionMsgsAreOnByDefault) {
                if (!plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendFirstJoinMessage(onlinePlayer, joiningPlayer, joiningPlayersNumber);
                }
            } else {
                if (plugin.connectionMsgs.contains(onlinePlayer.getUniqueId())) {
                    sendFirstJoinMessage(onlinePlayer, joiningPlayer, joiningPlayersNumber);
                }
            }
        }

        // Use Bukkit.getLogger() here to avoid using the plugin's prefix
        if (logFirstJoin) Bukkit.getLogger().info(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).firstJoinMessage
                        .replace("%player%", joiningPlayer.getName())
                        .replace("%players_num%", formatToOrdinal(joiningPlayer.getLocale(), joiningPlayersNumber))
        )+" ("+joiningPlayer.getLocale()+")");
    }

    private void sendFirstJoinMessage(Player onlinePlayer, Player joiningPlayer, int joiningPlayersNumber) {
        onlinePlayer.sendMessage(ChatColor.translateAlternateColorCodes('&',
                AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).firstJoinMessage
                        .replace("%player%", joiningPlayer.getName())
                        .replace("%players_num%", formatToOrdinal(onlinePlayer.getLocale(), joiningPlayersNumber))
        ));
    }

    private String formatToOrdinal(String playerLanguage, int number) {
        Locale playerLocale = Locale.forLanguageTag(playerLanguage);
        if (config.auto_lang && availableTranslations.contains(playerLocale)) {
            return new RuleBasedNumberFormat(playerLocale, RuleBasedNumberFormat.ORDINAL).format(number, "%digits-ordinal");
        } else {
            return new RuleBasedNumberFormat(config.default_lang, RuleBasedNumberFormat.ORDINAL).format(number, "%digits-ordinal");
        }
    }
}
