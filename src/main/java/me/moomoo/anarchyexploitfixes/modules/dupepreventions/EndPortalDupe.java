package me.moomoo.anarchyexploitfixes.modules.dupepreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.apache.commons.math3.util.FastMath;
import org.bukkit.World;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;

public class EndPortalDupe implements AnarchyExploitFixesModule, Listener {

    public EndPortalDupe() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("dupe-preventions.prevent-end-portal-dupe", "Patches https://www.youtube.com/watch?v=RLvErqzeK3Y");
    }

    @Override
    public String name() {
        return "prevent-end-portal-dupe";
    }

    @Override
    public String category() {
        return "dupe-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("dupe-preventions.prevent-end-portal-dupe", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onEntityDamage(EntityDamageEvent event) {
        Entity entity = event.getEntity();
        if (!(entity instanceof LivingEntity)) return;

        LivingEntity livingEntity = (LivingEntity) entity;

        if (
                (livingEntity instanceof ChestedHorse && ((ChestedHorse) livingEntity).isCarryingChest())
                || livingEntity.getCanPickupItems()
        ) {
            if (
                    (event.getCause().equals(EntityDamageEvent.DamageCause.ENTITY_ATTACK) || event.getCause().equals(EntityDamageEvent.DamageCause.FALL))
                    && livingEntity.getWorld().getEnvironment().equals(World.Environment.THE_END)
                    && FastMath.round(livingEntity.getLocation().getX()) == 100
                    && FastMath.round(livingEntity.getLocation().getZ()) == 0
                    && livingEntity.getHealth() - event.getDamage() <= 0
            ) {
                livingEntity.remove();
            }
        }
    }
}
