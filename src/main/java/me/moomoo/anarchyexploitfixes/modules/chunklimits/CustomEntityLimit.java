package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class CustomEntityLimit implements AnarchyExploitFixesModule, Runnable {

    private final HashMap<EntityType, Integer> entityLimits = new HashMap<>();
    private final boolean logIsEnabled;
    private final long checkPeriod;

    public CustomEntityLimit() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.custom-limit.enable",  "Limit specific entity types per chunk.");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.custom-limit.log-removals", true);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.custom-limit.check-period-in-ticks", 20, "check all chunks every x ticks.");
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("WITHER", 16);
        defaults.put("COW", 10);
        defaults.put("CHICKEN", 10);
        defaults.put("HORSE", 5);
        defaults.put("SKELETON_HORSE", 5);
        defaults.put("DONKEY", 5);
        ConfigSection section = config.getConfigSection("chunk-limits.entity-limits.custom-limit.limited-types", defaults, "Google EntityType Spigot-1."+AnarchyExploitFixes.getMCVersion()+" for the correct names.");
        if (section != null) {
            for (String configuredEntity : section.getKeys(false)) {
                Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredEntity));
                try {
                    EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                    entityLimits.put(limitedEntity, maxAmountPerChunk);
                } catch (IllegalArgumentException e) {
                    LogUtils.entityTypeNotRecognized(Level.WARNING, name(), configuredEntity);
                }
            }
        }
    }

    @Override
    public String name() {
        return "entity-limits.custom-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.custom-limit.enable", false) && !entityLimits.isEmpty();
    }

    @Override
    public void run() {
        for (World world : Bukkit.getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (chunk.isLoaded()) {
                    for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
                        Integer maxAllowed = limit.getValue();
                        int count = 0;
                        for (Entity entity : chunk.getEntities()) {
                            if (entity.getType().equals(limit.getKey())) {
                                count++;
                                if (count > maxAllowed) {
                                    entity.remove();
                                    if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Removed entity " + entity.getType()
                                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                            + " because reached limit of " + maxAllowed
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
