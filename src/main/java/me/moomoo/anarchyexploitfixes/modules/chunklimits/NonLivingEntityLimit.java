package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.entity.LivingEntity;

import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class NonLivingEntityLimit implements AnarchyExploitFixesModule, Runnable {

    private final boolean logIsEnabled;
    private final int maxNonLivingEntities;
    private final long checkPeriod;

    public NonLivingEntityLimit() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.non-living-limit.enable", "Limit the amount of non living entities in a chunk to prevent lag (does not affect items).");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.non-living-limit.log-removals", true);
        this.maxNonLivingEntities = config.getInt("chunk-limits.entity-limits.non-living-limit.max-non-living-per-chunk", 100);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.non-living-limit.check-period-in-ticks", 20, "20 ticks = 1 second");
    }

    @Override
    public String name() {
        return "entity-limits.non-living-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.non-living-limit.enable", false);
    }

    @Override
    public void run() {
        for (World world : Bukkit.getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (chunk.isLoaded()) {
                    int nonLiving = 0;
                    for (Entity entity : chunk.getEntities()) {
                        if (!(entity instanceof LivingEntity) && !(entity instanceof Item)) {
                            if (nonLiving > maxNonLivingEntities) {
                                entity.remove();
                                if (logIsEnabled)
                                    moduleLog(Level.INFO, name(), "Removed non-living entity " + entity.getType()
                                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                            + ", because reached limit of " + maxNonLivingEntities
                                    );
                            }
                            nonLiving++;
                        }
                    }
                }
            }
        }
    }
}
