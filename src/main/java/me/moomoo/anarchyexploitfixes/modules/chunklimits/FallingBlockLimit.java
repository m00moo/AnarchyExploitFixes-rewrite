package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPhysicsEvent;

import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.EntityUtils.amountOfFallingBlocks;
import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class FallingBlockLimit implements AnarchyExploitFixesModule, Listener {

    private final int maxFallingGravityBlockPerChunk;
    private final boolean logIsEnabled;

    public FallingBlockLimit() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.falling-block-limit.enable", "Prevent players from placing massive sand chunks and killing the server.");
        this.logIsEnabled = config.getBoolean("chunk-limits.falling-block-limit.log", false);
        this.maxFallingGravityBlockPerChunk = config.getInt("chunk-limits.falling-block-limit.max-falling-gravitiy-blocks-per-chunk", 60, "Removes any falling block if there is more than x blocks (actively) falling in a chunk.");
    }

    @Override
    public String name() {
        return "falling-block-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.falling-block-limit.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPhysics(BlockPhysicsEvent event) {
        if (!event.getChangedType().hasGravity()) return;
        Block block = event.getBlock();

        if (amountOfFallingBlocks(block.getChunk().getEntities()) > maxFallingGravityBlockPerChunk) {
            event.setCancelled(true);
            if (logIsEnabled) moduleLog(Level.INFO, name(),
                    "Prevented falling blocks at x:" + block.getX() + " y:" + block.getY() + " z:" + block.getZ()
                            + ", because reached limit of " + maxFallingGravityBlockPerChunk + " falling gravity blocks per chunk"
            );
        }
    }
}
