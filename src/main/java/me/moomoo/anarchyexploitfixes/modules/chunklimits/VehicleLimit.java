package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

import static me.moomoo.anarchyexploitfixes.utils.EntityUtils.amountOfVehicles;

public class VehicleLimit implements AnarchyExploitFixesModule, Listener, Runnable {

    private final int maxVehiclesPerChunk;
    private final long checkPeriod;

    public VehicleLimit() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.vehicle-limit.enable", "Limit the amount of vehicles to prevent some lag machines involving boats and a dispenser,");
        this.maxVehiclesPerChunk = config.getInt("chunk-limits.vehicle-limit.max-vehicles-per-chunk", 25);
        this.checkPeriod = config.getInt("chunk-limits.vehicle-limit.check-period-in-ticks", 200, "200 ticks = 10 seconds.");
    }

    @Override
    public String name() {
        return "vehicle-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.vehicle-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        if (amountOfVehicles(event.getVehicle().getChunk().getEntities()) > maxVehiclesPerChunk) {
            event.setCancelled(true);
        }
    }

    @Override
    public void run() {
        for (World world : Bukkit.getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (chunk.isLoaded()) {
                    int count = 0;
                    for (Entity entity : chunk.getEntities()) {
                        if (entity instanceof Vehicle) {
                            if (count > maxVehiclesPerChunk) {
                                entity.remove();
                            }
                            count++;
                        }
                    }
                }
            }
        }
    }
}
