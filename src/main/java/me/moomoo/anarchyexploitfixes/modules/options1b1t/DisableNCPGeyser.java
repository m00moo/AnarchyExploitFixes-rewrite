package me.moomoo.anarchyexploitfixes.modules.options1b1t;

import fr.neatmonster.nocheatplus.hooks.NCPExemptionManager;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.plugin.PluginManager;
import org.geysermc.floodgate.api.FloodgateApi;

public class DisableNCPGeyser implements AnarchyExploitFixesModule, Listener {

    private FloodgateApi floodgateApi;

    public DisableNCPGeyser() {
        if (AnarchyExploitFixes.getInstance().getServer().getPluginManager().isPluginEnabled("floodgate")) {
            floodgateApi = FloodgateApi.getInstance();
        }
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("1b1t-options.disable-ncp-geyser", "Disables NoCheatPlus for geyser players.\nRequires NoCheatPlus and Floodgate.");
    }

    @Override
    public String name() {
        return "disable-ncp-geyser";
    }

    @Override
    public String category() {
        return "1b1t-options";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        PluginManager pluginManager = AnarchyExploitFixes.getInstance().getServer().getPluginManager();
        return (
                AnarchyExploitFixes.getConfiguration().getBoolean("1b1t-options.disable-ncp-geyser", false)
                && pluginManager.isPluginEnabled("NoCheatPlus") && pluginManager.isPluginEnabled("floodgate")
        );
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        if (floodgateApi != null && floodgateApi.isFloodgateId(player.getUniqueId())) {
            NCPExemptionManager.exemptPermanently(player);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        Player player = event.getPlayer();
        if (floodgateApi != null && floodgateApi.isFloodgateId(player.getUniqueId())) {
            NCPExemptionManager.unexempt(player);
        }
    }

}
