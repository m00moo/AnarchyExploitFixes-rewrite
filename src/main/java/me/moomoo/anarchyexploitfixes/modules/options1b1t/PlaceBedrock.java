package me.moomoo.anarchyexploitfixes.modules.options1b1t;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

public class PlaceBedrock implements AnarchyExploitFixesModule, Listener {

    private final Material bedrock = XMaterial.BEDROCK.parseMaterial();
    private final int overworld_upper_limit, overworld_lower_limit, nether_upper_limit, nether_lower_limit, end_upper_limit, end_lower_limit;
    private final boolean overworld_placing_allowed, nether_placing_allowed, end_placing_allowed;

    public PlaceBedrock() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("1b1t-options.1b1t-place-bedrock.enable", "Allow placing bedrock within certain y-levels.");
        this.overworld_placing_allowed = config.getBoolean("1b1t-options.1b1t-place-bedrock.overworld.placing-allowed", true);
        this.overworld_upper_limit = config.getInt("1b1t-options.1b1t-place-bedrock.overworld.upper-y-limit", AnarchyExploitFixes.getMCVersion() > 17 ? 319 : 255);
        this.overworld_lower_limit = config.getInt("1b1t-options.1b1t-place-bedrock.overworld.lower-y-limit", AnarchyExploitFixes.getMCVersion() > 17 ? 10 : -54);
        this.nether_placing_allowed = config.getBoolean("1b1t-options.1b1t-place-bedrock.nether.placing-allowed", true);
        this.nether_upper_limit = config.getInt("1b1t-options.1b1t-place-bedrock.nether.upper-y-limit", 122);
        this.nether_lower_limit = config.getInt("1b1t-options.1b1t-place-bedrock.nether.lower-y-limit", 10);
        this.end_placing_allowed = config.getBoolean("1b1t-options.1b1t-place-bedrock.end.placing-allowed", false);
        this.end_upper_limit = config.getInt("1b1t-options.1b1t-place-bedrock.end.upper-y-limit", 80);
        this.end_lower_limit = config.getInt("1b1t-options.1b1t-place-bedrock.end.lower-y-limit", 0);
    }

    @Override
    public String name() {
        return "1b1t-place-bedrock";
    }

    @Override
    public String category() {
        return "1b1t-options";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("1b1t-options.1b1t-place-bedrock.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Block placedBlock = event.getBlockPlaced();
        if (!placedBlock.getType().equals(bedrock)) return;
        int placedBedrockBlockHeight = placedBlock.getY();
        switch (placedBlock.getWorld().getEnvironment()) {
            case NORMAL:
                if (overworld_placing_allowed) {
                    if (
                            placedBedrockBlockHeight >= overworld_upper_limit
                            || placedBedrockBlockHeight < overworld_lower_limit
                    ) {
                        event.setCancelled(true);
                        break;
                    }
                } else {
                    event.setCancelled(true);
                    break;
                }
            case NETHER:
                if (nether_placing_allowed) {
                    if (
                            placedBedrockBlockHeight >= nether_upper_limit
                            || placedBedrockBlockHeight < nether_lower_limit
                    ) {
                        event.setCancelled(true);
                        break;
                    }
                } else {
                    event.setCancelled(true);
                    break;
                }
            case THE_END:
                if (end_placing_allowed) {
                    if (
                            placedBedrockBlockHeight >= end_upper_limit
                            || placedBedrockBlockHeight < end_lower_limit
                    ) {
                        event.setCancelled(true);
                        break;
                    }
                } else {
                    event.setCancelled(true);
                    break;
                }
        }
    }
}
