package me.moomoo.anarchyexploitfixes.modules.options1b1t;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.apache.commons.math3.util.FastMath;
import org.bukkit.entity.Entity;
import org.bukkit.entity.ItemFrame;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.inventory.ItemStack;

import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class SlowDupe implements AnarchyExploitFixesModule, Listener {

    private final boolean logIsEnabled;

    public SlowDupe() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("1b1t-options.enable-slowdupe", "Enable 1b1t Slow!Dupe - 5% chance of duplicating an item by punching an itemframe");
        this.logIsEnabled = config.getBoolean("1b1t-options.log-dupes", false);
    }

    @Override
    public String name() {
        return "slowdupe";
    }

    @Override
    public String category() {
        return "1b1t-options";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("1b1t-options.enable-slowdupe", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPunch(EntityDamageByEntityEvent event) {
        Entity damagedEntity = event.getEntity();
        if (!(damagedEntity instanceof ItemFrame)) return;

        ItemStack itemInsideFrame = ((ItemFrame) damagedEntity).getItem();
        Entity damagingEntity = event.getDamager();
        double random = FastMath.random();

        if (isShulkerBox(itemInsideFrame)) {
            if ((random * 10) > 9.99) {
                damagedEntity.getWorld().dropItemNaturally(damagedEntity.getLocation(), itemInsideFrame);
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Entity "+damagingEntity.getName()+" duped a shulker at X:"+damagingEntity.getLocation().getBlockX() + " Y:"+damagingEntity.getLocation().getBlockY()+" Z:"+damagingEntity.getLocation().getBlockZ());
            }
        } else {
            if (random > 0.99 && (random * 10) < 9.99) {
                damagedEntity.getWorld().dropItemNaturally(damagedEntity.getLocation(), itemInsideFrame);
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Entity "+damagingEntity.getName()+" duped an item at X:"+damagingEntity.getLocation().getBlockX() + " Y:"+damagingEntity.getLocation().getBlockY()+" Z:"+damagingEntity.getLocation().getBlockZ());
            } else if ((random * 10) > 9.99) {
                damagedEntity.getWorld().dropItemNaturally(damagedEntity.getLocation(), itemInsideFrame.asQuantity(itemInsideFrame.getMaxStackSize()));
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Entity "+damagingEntity.getName()+" duped a stack of an item at X:"+damagingEntity.getLocation().getBlockX() + " Y:"+damagingEntity.getLocation().getBlockY()+" Z:"+damagingEntity.getLocation().getBlockZ());
            }
        }
    }
}
