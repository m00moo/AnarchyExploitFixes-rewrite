package me.moomoo.anarchyexploitfixes.modules.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

public class DisableFish implements AnarchyExploitFixesModule, Listener {

    private final HashSet<EntityType> disabledFishes = new HashSet<>();

    public DisableFish() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.prevent-ambient-fish-spawns.enable", "Prevent certain fish types from spawning in newer versions to combat lag.");
        List<String> configuredPreventedFish = config.getList("preventions.prevent-ambient-fish-spawns.fish-types-to-prevent", Arrays.asList(
                "COD", "SALMON", "PUFFERFISH", "TROPICAL_FISH"
        ));
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            for (String configuredFish : configuredPreventedFish) {
                try {
                    EntityType fish = EntityType.valueOf(configuredFish);
                    disabledFishes.add(fish);
                } catch (IllegalArgumentException exception) {
                    LogUtils.entityTypeNotRecognized(Level.WARNING, name(), configuredFish);
                }
            }
        }
    }

    @Override
    public String name() {
        return "prevent-ambient-fish-spawns";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return (
                AnarchyExploitFixes.getConfiguration().getBoolean("preventions.prevent-ambient-fish-spawns.enable", false)
                && AnarchyExploitFixes.getMCVersion() > 12
        );
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreatureSpawn(CreatureSpawnEvent event) {
        if (disabledFishes.contains(event.getEntity().getType())) {
            event.setCancelled(true);
        }
    }
}
