package me.moomoo.anarchyexploitfixes.modules.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.*;

import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;

public class PreventOppedPlayers implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> allowedOperators = new HashSet<>();
    private final boolean logIsEnabled;

    public PreventOppedPlayers() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.prevent-opped-players.enable", "Useful if you suspect a backdoored plugin.");
        this.logIsEnabled = config.getBoolean("preventions.prevent-opped-players.log", true);
        allowedOperators.addAll(config.getList("preventions.prevent-opped-players.whitelisted-players", Collections.singletonList("Notch")));
    }

    @Override
    public String name() {
        return "prevent-opped-players";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.prevent-opped-players.enable", false);
    }

    private void checkForIllegalOp(Player player) {
        if (allowedOperators.contains(player.getName())) return;
        if (player.isOp()) {
            player.setOp(false);
            if (logIsEnabled) LogUtils.moduleLog(Level.WARNING, name(),"Deopped illegally opped player '"+player.getName()+"'.");
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onMove(PlayerMoveEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL)
    private void onChat(AsyncPlayerChatEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL)
    private void onCommand(PlayerCommandPreprocessEvent event) {
        checkForIllegalOp(event.getPlayer());
    }
}
