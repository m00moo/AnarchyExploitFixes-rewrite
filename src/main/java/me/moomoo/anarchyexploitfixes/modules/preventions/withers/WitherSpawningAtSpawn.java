package me.moomoo.anarchyexploitfixes.modules.preventions.withers;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wither;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;

import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class WitherSpawningAtSpawn implements AnarchyExploitFixesModule, Listener {

    private final HashMap<String, Integer> worldsAndTheirRadiuses = new HashMap<>();
    private final boolean playersShouldBeInformed;

    public WitherSpawningAtSpawn() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.withers.disable-wither-spawning-at-spawn.enable","Only enable if you must.");
        this.playersShouldBeInformed = config.getBoolean("preventions.withers.disable-wither-spawning-at-spawn.inform-players", true);
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", 5000);
        defaults.put("world_nether", 5000);
        defaults.put("world_the_end", 5000);
        ConfigSection section = config.getConfigSection("preventions.withers.disable-wither-spawning-at-spawn.worlds", defaults);
        if (section != null) {
            for (String world : section.getKeys(false)) {
                Integer radius = Integer.valueOf(section.getString(world));
                worldsAndTheirRadiuses.put(world, radius);
            }
        }
    }

    @Override
    public String name() {
        return "disable-wither-spawning-at-spawn";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.withers.disable-wither-spawning-at-spawn.enable", false) && !worldsAndTheirRadiuses.isEmpty();
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreatureSpawn(CreatureSpawnEvent event) {
        Entity entity = event.getEntity();
        if (!(entity instanceof Wither)) return;

        Location witherLocation = entity.getLocation();

        for (Map.Entry<String, Integer> entry : worldsAndTheirRadiuses.entrySet()) {
            String worldName = entry.getKey();
            Integer radius = entry.getValue();

            if (entity.getWorld().getName().equals(worldName) && isInDisabledRange(witherLocation, radius)) {
                event.setCancelled(true);
                if (playersShouldBeInformed) sendMessageToNearbyPlayers(witherLocation, radius);
            }
        }
    }

    private boolean isInDisabledRange(Location witherLocation, int radius) {
        Point witherPoint = new Point(witherLocation.getBlockX(), witherLocation.getBlockZ());
        Point spawnPoint = new Point(0, 0);
        return witherPoint.distance(spawnPoint) < radius;
    }

    private void sendMessageToNearbyPlayers(Location witherLocation, int radius) {
        for (Player nearbyPlayer : witherLocation.getNearbyPlayers(8)) {
            nearbyPlayer.sendMessage(ChatColor.translateAlternateColorCodes('&',
                    AnarchyExploitFixes.getLang(nearbyPlayer.getLocale()).witherSpawningDisabledInRadius)
                            .replace("%radius%", String.valueOf(radius))
            );
        }
    }
}
