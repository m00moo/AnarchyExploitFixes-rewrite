package me.moomoo.anarchyexploitfixes.modules.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.GameMode;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.*;

import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;

public class PreventNonSurvival implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> allowedGamemodePlayers = new HashSet<>();
    private final boolean logIsEnabled;
    
    public PreventNonSurvival() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.prevent-non-survival-players.enable", "Checks if player is in survival and puts him back into survival if not, Useful if you had a backdoor incident.");
        this.logIsEnabled = config.getBoolean("preventions.prevent-non-survival-players.log", true);
        allowedGamemodePlayers.addAll(config.getList("preventions.prevent-non-survival-players.whitelisted-players", Collections.singletonList("Notch")));
    }

    @Override
    public String name() {
        return "prevent-non-survival-players";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.prevent-non-survival-players.enable", false);
    }
    private void checkForIllegalGamemode(Player player) {
        if (allowedGamemodePlayers.contains(player.getName())) return;

        if (!player.getGameMode().equals(GameMode.SURVIVAL)) {
            player.setGameMode(GameMode.SURVIVAL);
            if (logIsEnabled) LogUtils.moduleLog(Level.WARNING, name(),"Changed gamemode of '"+player.getName()+"' back to survival.");
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpen(InventoryOpenEvent event) {
        HumanEntity humanEntity = event.getPlayer();
        if (humanEntity instanceof Player) {
            Player player = (Player) humanEntity;
            checkForIllegalGamemode(player);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onMove(PlayerMoveEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL)
    private void onChat(AsyncPlayerChatEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.NORMAL)
    private void onCommand(PlayerCommandPreprocessEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }
}
