package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import java.util.HashMap;
import java.util.logging.Level;

public class IllegalGoldenApples implements AnarchyExploitFixesModule, Listener {

    private final HashMap<Material, MaterialData> allowedAppleData = new HashMap<>();

    public IllegalGoldenApples() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("illegals.data-values.revert-illegal-golden-apples", "1.12 only.");
        Material golden_apple = XMaterial.GOLDEN_APPLE.parseMaterial();
        Material enchanted_golden_apple = XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial();
        if (golden_apple != null) {
            allowedAppleData.put(golden_apple, new MaterialData(golden_apple));
        } else {
            LogUtils.moduleLog(Level.WARNING, name(),"There was a problem parsing the material 'Golden Apple'. If this keeps happening, open an issue on the project's github.");
        }
        if (enchanted_golden_apple != null) {
            allowedAppleData.put(enchanted_golden_apple, new MaterialData(enchanted_golden_apple));
        } else {
            LogUtils.moduleLog(Level.WARNING, name(),"There was a problem parsing the material 'Enchanted Golden Apple'. If this keeps happening, open an issue on the project's github.");
        }
    }

    @Override
    public String name() {
        return "remove-illegal-golden-apples";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return (
                AnarchyExploitFixes.getConfiguration().getBoolean("illegals.data-values.revert-illegal-golden-apples", false)
                && AnarchyExploitFixes.getMCVersion() <= 12
        );
    }

    private void handleIllegalEGapsIfPresent(ItemStack item) {
        if (item != null) {
            if (allowedAppleData.containsKey(item.getType())) {
                if (!allowedAppleData.containsValue(item.getData())) {
                    // Revert to regular apple data instead of deleting item
                    item.setData(allowedAppleData.get(item.getType()));
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleIllegalEGapsIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleIllegalEGapsIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleIllegalEGapsIfPresent(event.getCurrentItem());
        handleIllegalEGapsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleIllegalEGapsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIllegalEGapsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            handleIllegalEGapsIfPresent(event.getItem().getItemStack());
            Player player = (Player) entity;
            for (ItemStack item : player.getInventory()) {
                handleIllegalEGapsIfPresent(item);
            }
        }
    }
}
