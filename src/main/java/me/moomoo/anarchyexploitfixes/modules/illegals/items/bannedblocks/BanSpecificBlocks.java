package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class BanSpecificBlocks implements AnarchyExploitFixesModule, Listener {

    private final boolean enableStrictPrevention, shouldCheckShulker;
    private final HashSet<Material> bannedItems = new HashSet<>();
    private final long checkPeriod;
    private final Material air;

    public BanSpecificBlocks() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();

        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
            );
        } else {
            defaults = Arrays.asList("PLAYER_HEAD", "BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME");
        }

        List<String> configuredBannedBlocks = config.getList("illegals.ban-specific-blocks.banned-blocks", defaults);
        for (String configuredBlock : configuredBannedBlocks) {
            try {
                Material bannedMaterial = Material.valueOf(configuredBlock);
                bannedItems.add(bannedMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
            }
        }
        this.shouldCheckShulker = config.getBoolean("illegals.ban-specific-blocks.delete-shulker-if-contains-banned-block", false);
        this.enableStrictPrevention = config.getBoolean("illegals.ban-specific-blocks.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.ban-specific-blocks.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "ban-specific-blocks.remove-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.remove-items", true);
    }

    private void handleBannedItemsIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (bannedItems.contains(item.getType())) {
            item.subtract(item.getAmount());
        }

        if (shouldCheckShulker) {
            if (isShulkerBox(item)) checkForIllegalsInShulker(item);
        }
    }

    private void checkForIllegalsInShulker(ItemStack shulker) {
        BlockStateMeta meta = (BlockStateMeta) shulker.getItemMeta();
        ShulkerBox box = (ShulkerBox) meta.getBlockState();

        for (ItemStack contentItem : box.getInventory().getContents()) {
            if (contentItem == null || contentItem.getType().equals(air)) continue;

            if (bannedItems.contains(contentItem.getType())) {
                shulker.subtract(shulker.getAmount());
                return;
            }
        }
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleBannedItemsIfPresent(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBannedItemsIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemsIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleBannedItemsIfPresent(event.getCurrentItem());
        handleBannedItemsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleBannedItemsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleBannedItemsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            Player player = (Player) entity;
            handleBannedItemsIfPresent(event.getItem().getItemStack());
            for (ItemStack item : player.getInventory()) {
                handleBannedItemsIfPresent(item);
            }
        }
    }
}
