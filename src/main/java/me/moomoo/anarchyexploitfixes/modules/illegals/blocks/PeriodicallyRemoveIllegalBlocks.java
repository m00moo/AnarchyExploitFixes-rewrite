package me.moomoo.anarchyexploitfixes.modules.illegals.blocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.block.Skull;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ChunkUtils.getMinWorldHeight;

public class PeriodicallyRemoveIllegalBlocks implements AnarchyExploitFixesModule, Runnable {

    private final HashSet<Material> blocksToRemove = new HashSet<>();
    private final HashSet<String> exemptedWorlds = new HashSet<>();
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean checkShouldPauseOnLowTPS;
    private final Material air, bedrock, player_head;

    public PeriodicallyRemoveIllegalBlocks() {
        shouldEnable();
        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER"
            );
        } else {
            defaults = Arrays.asList("PLAYER_HEAD", "BEDROCK", "BARRIER", "COMMAND");
        }

        Config config = AnarchyExploitFixes.getConfiguration();
        this.player_head = XMaterial.PLAYER_HEAD.parseMaterial();
        List<String> configuredBlocksToRemove = config.getList("illegals.remove-placed-blocks.periodically.blocks-to-remove", defaults);
        config.addComment("illegals.remove-placed-blocks.periodically.blocks-to-remove", "Enter PLAYER_HEAD here if you want to remove placed playerheads.\nNOTE: ONLY applies to PLAYER_HEAD. For everything else you have to use correct Material enums for your Minecraft version.");
        for (String configuredBlock : configuredBlocksToRemove) {
            if (configuredBlock.equalsIgnoreCase("PLAYER_HEAD")) {
                blocksToRemove.add(player_head);
            } else {
                try {
                    Material blockToRemove = Material.valueOf(configuredBlock);
                    blocksToRemove.add(blockToRemove);
                } catch (IllegalArgumentException e) {
                    LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
                }
            }
        }
        this.exemptedWorlds.addAll(config.getList("illegals.remove-placed-blocks.periodically.exempted-worlds", Arrays.asList(
                "exampleworld1", "exampleworld2"
        )));
        this.checkPeriod = config.getInt("illegals.remove-placed-blocks.periodically.check-period-in-seconds", 10) * 20L;
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-placed-blocks.periodically.pause-on-low-TPS", true);
        this.pauseTPS = config.getDouble("illegals.remove-placed-blocks.periodically.pause-TPS", 14.0);

        this.air = XMaterial.AIR.parseMaterial();
        this.bedrock = XMaterial.BEDROCK.parseMaterial();
    }

    @Override
    public String name() {
        return "remove-placed-blocks.periodically";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-placed-blocks.periodically.enable", false);
    }

    @Override
    public void run() {
        if (checkShouldPauseOnLowTPS && (AnarchyExploitFixes.getTPSofLastSecond() <= pauseTPS)) return;

        for (World world : Bukkit.getWorlds()) {
            if (!exemptedWorlds.contains(world.getName())) {
                int minY = getMinWorldHeight(world);
                int maxY = world.getMaxHeight();
                boolean inNether = world.getEnvironment().equals(World.Environment.NETHER);

                for (Chunk chunk : world.getLoadedChunks()) {
                    if (chunk.isLoaded()) {
                        for (int x = 0; x < 16; x++) {
                            for (int z = 0; z < 16; z++) {
                                for (int y = minY; y < maxY; y++) {
                                    Block block = chunk.getBlock(x, y, z);
                                    Material blockType = block.getType();
                                    if (blocksToRemove.contains(blockType)) {
                                        if (blockType.equals(player_head)) {
                                            Skull skull = (Skull) block.getState();
                                            if (
                                                    skull.hasOwner()
                                                    || skull.getSkullType().equals(SkullType.PLAYER)
                                            ) {
                                                block.setType(air, false);
                                            }
                                        } else if (blockType.equals(bedrock)) {
                                            if (y > minY + 4) { // offset to not delete natural bedrock floor
                                                if (inNether) {
                                                    // offset to not delete bedrock ceiling
                                                    if (y < 123) block.setType(air, false);
                                                } else {
                                                    block.setType(air, false);
                                                }
                                            }
                                        } else {
                                            block.setType(air, false);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
