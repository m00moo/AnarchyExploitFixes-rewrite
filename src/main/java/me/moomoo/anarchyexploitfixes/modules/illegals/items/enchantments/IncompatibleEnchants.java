package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XEnchantment;
import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.*;

public class IncompatibleEnchants implements AnarchyExploitFixesModule, Listener {

    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    private final Enchantment binding_curse, vanishing_curse, crossbow_multishot, crossbow_piercing, trident_riptide, trident_loyalty, trident_channeling, mending,
            bow_arrow_infinite, tools_silk_touch, tools_loot_bonus_blocks, boots_depth_strider, boots_frost_walker, sword_damage_all, sword_damage_arthropods,
            sword_damage_undead, armor_protection_environmental, armor_protection_explosions, armor_protection_fire, armor_protection_projectile;
    private final Material air;



    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.revert-incompatible-enchants.enable",  "Reverts items like Armor with all Protection enchantments.");
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.use-as-blacklist-instead", false);
        List<String> configuredWhitelistedItems = config.getList("illegals.enchantments.revert-incompatible-enchants.whitelisted-items", Collections.singletonList("BOW"));
        for (String configuredItem : configuredWhitelistedItems) {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        }
        this.enableStrictPrevention = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.revert-incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.binding_curse = XEnchantment.BINDING_CURSE.getEnchant();
        this.vanishing_curse = XEnchantment.VANISHING_CURSE.getEnchant();
        this.crossbow_multishot = XEnchantment.MULTISHOT.getEnchant();
        this.crossbow_piercing = XEnchantment.PIERCING.getEnchant();
        this.trident_riptide = XEnchantment.RIPTIDE.getEnchant();
        this.trident_loyalty = XEnchantment.LOYALTY.getEnchant();
        this.trident_channeling = XEnchantment.CHANNELING.getEnchant();
        this.mending = XEnchantment.MENDING.getEnchant();
        this.bow_arrow_infinite = XEnchantment.ARROW_INFINITE.getEnchant();
        this.tools_silk_touch = XEnchantment.SILK_TOUCH.getEnchant();
        this.tools_loot_bonus_blocks = XEnchantment.LOOT_BONUS_BLOCKS.getEnchant();
        this.boots_depth_strider = XEnchantment.DEPTH_STRIDER.getEnchant();
        this.boots_frost_walker = XEnchantment.FROST_WALKER.getEnchant();
        this.sword_damage_all = XEnchantment.DAMAGE_ALL.getEnchant();
        this.sword_damage_arthropods = XEnchantment.DAMAGE_ARTHROPODS.getEnchant();
        this.sword_damage_undead = XEnchantment.DAMAGE_UNDEAD.getEnchant();
        this.armor_protection_environmental = XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant();
        this.armor_protection_explosions = XEnchantment.PROTECTION_EXPLOSIONS.getEnchant();
        this.armor_protection_fire = XEnchantment.PROTECTION_FIRE.getEnchant();
        this.armor_protection_projectile = XEnchantment.PROTECTION_PROJECTILE.getEnchant();
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "revert-incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (enableStrictPrevention) plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, checkPlayerInvsPeriodically,20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.revert-incompatible-enchants.enable", true);
    }

    private void handleIncompatibleEnchantsIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (whitelistIsEnabled) {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            }
        } else {
            filterBasedOnType(item);
        }
    }

    private void filterBasedOnType(ItemStack item) {
        if (isArmor(item)) {
            filterProtectionEnchants(item);
            filterCurses(item);
            if (isBoots(item)) {
                filterBoots(item);
            }
            return;
        }
        if (isElytra(item)) {
            filterCurses(item);
            return;
        }
        if (isTool(item)) {
            filterTools(item);
            if (isAxe(item)) {
                filterSharpnessEnchants(item);
            }
            return;
        }
        if (isSword(item)) {
            filterSharpnessEnchants(item);
            return;
        }
        if (isBow(item)) {
            filterBow(item);
            return;
        }
        if (isTrident(item)) {
            filterTrident(item);
            return;
        }
        if (isCrossbow(item)) {
            filterCrossbow(item);
        }
    }

    private void filterCurses(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(binding_curse)
                && enchantments.containsKey(vanishing_curse)
        ) {
            item.removeEnchantment(binding_curse);
        }
    }

    private void filterCrossbow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(crossbow_multishot)
                && enchantments.containsKey(crossbow_piercing)
        ) {
            item.removeEnchantment(crossbow_multishot);
        }
    }

    private void filterTrident(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (enchantments.containsKey(trident_riptide)) {
            if (
                    enchantments.containsKey(trident_loyalty)
                    || enchantments.containsKey(trident_channeling)
            ) {
                item.removeEnchantment(trident_riptide);
            }
        }
    }

    private void filterBow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(mending)
                && enchantments.containsKey(bow_arrow_infinite)
        ) {
            item.removeEnchantment(bow_arrow_infinite);
        }
    }

    private void filterTools(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(tools_silk_touch)
                && enchantments.containsKey(tools_loot_bonus_blocks)
        ) {
            item.removeEnchantment(tools_loot_bonus_blocks);
        }
    }

    private void filterBoots(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(boots_depth_strider)
                && enchantments.containsKey(boots_frost_walker)
        ) {
            item.removeEnchantment(boots_frost_walker);
        }
    }

    private void filterSharpnessEnchants(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;

        // Prefer keeping Sharpness enchantment if it is present
        if (enchantments.containsKey(sword_damage_all)) {
            if (enchantments.containsKey(sword_damage_arthropods))
                item.removeEnchantment(sword_damage_arthropods);
            if (enchantments.containsKey(sword_damage_undead))
                item.removeEnchantment(sword_damage_undead);
        } else if (
                enchantments.containsKey(sword_damage_arthropods)
                && enchantments.containsKey(sword_damage_undead)
        ) {
            item.removeEnchantment(sword_damage_arthropods);
        }
    }

    private void filterProtectionEnchants(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        // Prefer keeping Protection enchantment if it is present
        if (enchantments.containsKey(armor_protection_environmental)) {
            if (enchantments.containsKey(armor_protection_explosions))
                item.removeEnchantment(armor_protection_explosions);
            if (enchantments.containsKey(armor_protection_fire))
                item.removeEnchantment(armor_protection_fire);
            if (enchantments.containsKey(armor_protection_projectile))
                item.removeEnchantment(armor_protection_projectile);
        // If protection is not present, prefer blast protection
        } else if (enchantments.containsKey(armor_protection_explosions)) {
            if (enchantments.containsKey(armor_protection_fire))
                item.removeEnchantment(armor_protection_fire);
            if (enchantments.containsKey(armor_protection_projectile))
                item.removeEnchantment(armor_protection_projectile);
        // If protection and blast protection is not present, prefer projectile protection
        } else if (
                enchantments.containsKey(armor_protection_projectile)
                && enchantments.containsKey(armor_protection_fire)
        ) {
            item.removeEnchantment(armor_protection_fire);
        }
    }

    private final Runnable checkPlayerInvsPeriodically = () -> {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (ItemStack item : player.getInventory()) {
                handleIncompatibleEnchantsIfPresent(item);
            }
        }
    };

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getCurrentItem());
        handleIncompatibleEnchantsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            Player player = (Player) entity;
            handleIncompatibleEnchantsIfPresent(event.getItem().getItemStack());
            for (ItemStack item : player.getInventory()) {
                handleIncompatibleEnchantsIfPresent(item);
            }
        }
    }
}
