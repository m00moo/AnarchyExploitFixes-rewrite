package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

public class PreventPlacingBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> bannedItems = new HashSet<>();
    private final Material ender_eye = XMaterial.ENDER_EYE.parseMaterial();
    private final Material end_portal_frame = XMaterial.END_PORTAL_FRAME.parseMaterial();

    public PreventPlacingBannedBlocks() {
        shouldEnable();

        // default list entries based on version
        List<String> defaults;
        if (AnarchyExploitFixes.getMCVersion() > 12) {
            defaults = Arrays.asList(
                    "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                    "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
            );
        } else {
            defaults = Arrays.asList("PLAYER_HEAD", "BEDROCK", "BARRIER", "COMMAND", "STRUCTURE_BLOCK", "ENDER_PORTAL_FRAME");
        }

        List<String> configuredBannedBlocks = AnarchyExploitFixes.getConfiguration().getList("illegals.ban-specific-blocks.banned-blocks", defaults);
        for (String configuredBlock : configuredBannedBlocks) {
            if (configuredBlock.equalsIgnoreCase("PLAYER_HEAD")) {
                bannedItems.add(XMaterial.PLAYER_HEAD.parseMaterial());
            } else {
                try {
                    Material bannedMaterial = Material.valueOf(configuredBlock);
                    bannedItems.add(bannedMaterial);
                } catch (IllegalArgumentException e) {
                    LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
                }
            }
        }
    }

    @Override
    public String name() {
        return "ban-specific-blocks.prevent-placing";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.prevent-placing", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Material placedType = event.getBlock().getType();
        if (bannedItems.contains(placedType)) {
            if (
                    !(placedType.equals(end_portal_frame)
                    && event.getPlayer().getInventory().getItemInMainHand().getType().equals(ender_eye))
            ) {
                event.setCancelled(true);
            }
        }
    }
}
