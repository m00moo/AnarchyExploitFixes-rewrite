package me.moomoo.anarchyexploitfixes.modules.illegals.items.spawneggs;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;
import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isSpawnEgg;

public class RemoveSpawnEggs implements AnarchyExploitFixesModule, Listener {

    private final boolean shouldCheckShulker;
    private final Material air;

    public RemoveSpawnEggs() {
        shouldEnable();
        this.shouldCheckShulker = AnarchyExploitFixes.getConfiguration().getBoolean("illegals.spawn-eggs.remove-spawn-eggs.delete-shulker-if-contains-spawn-egg", false);
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "spawn-eggs.remove-spawn-eggs";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.spawn-eggs.remove-spawn-eggs.enable", false);
    }

    private void removeSpawnEggIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (isSpawnEgg(item)) {
            item.subtract(item.getAmount());
        }

        if (shouldCheckShulker) {
            if (isShulkerBox(item) && shulkerContainsSpawnEgg(item)) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsSpawnEgg(ItemStack shulker) {
        BlockStateMeta meta = (BlockStateMeta) shulker.getItemMeta();
        ShulkerBox shulkerBox = (ShulkerBox) meta.getBlockState();

        for (ItemStack contentItem : shulkerBox.getInventory().getContents()) {
            if (contentItem == null || contentItem.getType().equals(air)) continue;
            if (isSpawnEgg(contentItem)) return true;
        }

        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            removeSpawnEggIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        removeSpawnEggIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        removeSpawnEggIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        for (ItemStack item : event.getPlayer().getInventory()) {
            removeSpawnEggIfPresent(item);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryInteractEvent event) {
        for (ItemStack item : event.getInventory()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryClick(InventoryClickEvent event) {
        removeSpawnEggIfPresent(event.getCurrentItem());
        removeSpawnEggIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        for (ItemStack item : event.getSource()) {
            removeSpawnEggIfPresent(item);
        }
        for (ItemStack item : event.getDestination()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryPickup(InventoryPickupItemEvent event) {
        for (ItemStack item : event.getInventory()) {
            removeSpawnEggIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(EntityPickupItemEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) {
            removeSpawnEggIfPresent(event.getItem().getItemStack());
            Player player = (Player) entity;
            for (ItemStack item : player.getInventory()) {
                removeSpawnEggIfPresent(item);
            }
        }
    }
}
